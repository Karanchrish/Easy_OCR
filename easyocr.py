# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17HxOUkYhaWjHIcffp6M_s4872l24cSdb
"""

pip install easyocr opencv-python-headless torch

import torch
import easyocr
import cv2
import time
from difflib import SequenceMatcher
import matplotlib.pyplot as plt

def similarity(a, b):
    return SequenceMatcher(None, a, b).ratio()

def process_video(video_path, reader, device, frame_skip=5, resize_factor=0.5):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("Error: Could not open video.")
        return None, None

    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH) * resize_factor)
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT) * resize_factor)

    start_time = time.time()
    frame_count = 0
    ocr_results = []

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        if frame_count % frame_skip == 0:
            frame = cv2.resize(frame, (width, height))

            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            result = reader.readtext(rgb_frame)
            ocr_results.append(result)

        frame_count += 1

    end_time = time.time()
    processing_time = end_time - start_time
    avg_fps = frame_count / processing_time

    cap.release()

    return avg_fps, ocr_results

def display_fps_comparison(gpu_fps, cpu_fps):
    labels = ['GPU', 'CPU']
    fps_values = [gpu_fps, cpu_fps]

    plt.figure(figsize=(6, 4))
    plt.bar(labels, fps_values, color=['blue', 'green'])
    plt.ylabel('Frames Per Second (FPS)')
    plt.title('GPU vs CPU FPS Comparison')
    plt.ylim(0, max(fps_values) + 2)
    plt.show()

video_path = '/content/drive/MyDrive/Sample/CV/model3.mp4'
device_gpu = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

print("Loading GPU model...")
reader_gpu = easyocr.Reader(['en'], gpu=True)

print("Processing video with GPU...")
gpu_fps, gpu_results = process_video(video_path, reader_gpu, 'GPU', frame_skip=5, resize_factor=0.5)

print("Loading CPU model...")
reader_cpu = easyocr.Reader(['en'], gpu=False)

print("Processing video with CPU...")
cpu_fps, cpu_results = process_video(video_path, reader_cpu, 'CPU', frame_skip=5, resize_factor=0.5)

if gpu_fps is not None and cpu_fps is not None:
    print(f"GPU FPS: {gpu_fps:.2f}")
    print(f"CPU FPS: {cpu_fps:.2f}")
    display_fps_comparison(gpu_fps, cpu_fps)
else:
    print("Could not calculate FPS for one or both runs.")

if gpu_results is not None and cpu_results is not None:
    print(f"\nAccuracy comparison (sample results):")
    for i in range(min(5, len(gpu_results))):
        gpu_text = ' '.join([item[1] for item in gpu_results[i]])
        cpu_text = ' '.join([item[1] for item in cpu_results[i]])
        print(f"\nFrame {i + 1}:")
        print(f"GPU OCR: {gpu_text}")
        print(f"CPU OCR: {cpu_text}")
        print(f"Similarity: {similarity(gpu_text, cpu_text):.2f}")
else:
    print("Could not perform OCR accuracy comparison due to missing results.")









